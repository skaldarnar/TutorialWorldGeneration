(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{140:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/facet-production-975b8dec6f27d07a9bca501b2ebf5d7d.png"},73:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return d}));var r=n(3),o=n(7),a=(n(0),n(95)),i={id:"tutorial-02",title:"Facet Production"},c={unversionedId:"tutorial-02",id:"tutorial-02",isDocsHomePage:!1,title:"Facet Production",description:"And now for some fun with metadata.  As mentioned before, we need to provide surface height information so that our rasterizer can read this data and put blocks & players in the right place.  Fortunately, the engine provides us with a facet definition for this, ElevationFacet - an approximate 2d representation of the surface of the world.  Each (X; Y) position holds the value of the height of the surface.",source:"@site/docs/02_Facet-Production.md",slug:"/tutorial-02",permalink:"/docs/tutorial-02",editUrl:"https://github.com/terasology/TutorialWorldGeneration/edit/develop/docs/docs/02_Facet-Production.md",version:"current",sidebar:"someSidebar",previous:{title:"Rasterizer",permalink:"/docs/tutorial-01"},next:{title:"Noise Sampling",permalink:"/docs/tutorial-03"}},l=[],s={toc:l};function d(e){var t=e.components,i=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},s,i,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"And now for some fun with metadata.  As mentioned before, we need to provide surface height information so that our rasterizer can read this data and put blocks & players in the right place.  Fortunately, the engine provides us with a facet definition for this, ",Object(a.b)("inlineCode",{parentName:"p"},"ElevationFacet")," - an approximate 2d representation of the surface of the world.  Each (X; Y) position holds the value of the height of the surface."),Object(a.b)("p",null,"Let's start with a skeleton class:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-java"},"@Produces(ElevationFacet.class)\npublic class SurfaceProvider implements FacetProvider {\n    @Override\n    public void setSeed(long seed) {\n    }\n\n    @Override\n    public void process(GeneratingRegion region) {\n    }\n}\n")),Object(a.b)("p",null,"The key part of this skeleton is the annotation - without it, the world builder will not know how to organize facet providers together."),Object(a.b)("p",null,"Now let's reimplement our existing rasterizer data - but lets make it a little more interesting and define our surface as being located y=10, because danger happens at y=10! :P"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-java"},"@Override\npublic void process(GeneratingRegion region) {\n    // Create our elevation facet (we will get into borders later)\n    Border3D border = region.getBorderForFacet(ElevationFacet.class);\n    ElevationFacet facet = new ElevationFacet(region.getRegion(), border);\n\n    // Loop through every position in our 2d array\n    Rect2i processRegion = facet.getWorldRegion();\n    for (BaseVector2i position: processRegion.contents()) {\n        facet.setWorld(position, 10f);\n    }\n\n    // Pass our newly created and populated facet to the region\n    region.setRegionFacet(ElevationFacet.class, facet);\n}\n")),Object(a.b)("p",null,"Some key points to note is that ",Object(a.b)("inlineCode",{parentName:"p"},"facet.getWorldRegion()")," refers to world coordinates which happen to coincide with ",Object(a.b)("inlineCode",{parentName:"p"},"facet.setWorld()"),".  There are also methods that deal with the local coordinate system, but it is easier to stick with world positions."),Object(a.b)("p",null,"We then add this to our world builder:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-java"},"@In\nprivate WorldGeneratorPluginLibrary worldGeneratorPluginLibrary;\n\n@Override\nprotected WorldBuilder createWorld() {\n    return new WorldBuilder(worldGeneratorPluginLibrary)\n           .addProvider(new SurfaceProvider())\n           .addProvider(new SeaLevelProvider(0))\n           .addRasterizer(new TutorialWorldRasterizer());\n}\n")),Object(a.b)("p",null,"(Oh, right - don't forget to put in the ",Object(a.b)("inlineCode",{parentName:"p"},"SeaLevelProvider")," so that the game doesn't spawn the player 100 meters underwater! You'll need to add CoreWorlds as a dependency in the new module's ",Object(a.b)("inlineCode",{parentName:"p"},"module.txt")," file. Make sure to recompile or do a ",Object(a.b)("inlineCode",{parentName:"p"},"gradlew idea")," followed by an Intellij restart.)"),Object(a.b)("p",null,"Now, when we run the rasterizer, we can access this facet data that we have provided.  Lets use it:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-java"},"@Override\npublic void generateChunk(CoreChunk chunk, Region chunkRegion) {\n    ElevationFacet elevationFacet = chunkRegion.getFacet(ElevationFacet.class);\n    for (Vector3i position : chunkRegion.getRegion()) {\n        float surfaceHeight = elevationFacet.getWorld(position.x, position.z);\n        if (position.y < surfaceHeight) {\n            chunk.setBlock(ChunkMath.calcBlockPos(position), dirt);\n        }\n    }\n}\n")),Object(a.b)("p",null,"Be sure to get your x and z correct.  The surface height facet uses 2D (x; y) coordinates, while ",Object(a.b)("inlineCode",{parentName:"p"},"Vector3i")," uses y as height."),Object(a.b)("p",null,"Now run the generator again and witness lots of exciting dirt at y=10!"),Object(a.b)("p",null,Object(a.b)("img",{alt:"Facet Production",src:n(140).default})))}d.isMDXComponent=!0},95:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return f}));var r=n(0),o=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=o.a.createContext({}),d=function(e){var t=o.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=d(e.components);return o.a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},b=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=d(n),b=r,f=u["".concat(i,".").concat(b)]||u[b]||p[b]||a;return n?o.a.createElement(f,c(c({ref:t},s),{},{components:n})):o.a.createElement(f,c({ref:t},s))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=b;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var s=2;s<a;s++)i[s]=n[s];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);