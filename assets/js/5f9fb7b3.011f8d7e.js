(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{143:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/brownianPerlinOctave4-6d13f18f44295f28a921550ad1aea97c.png"},144:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/brownianPerlinOctave8-f55c7a89e9b95975a3096e6c03ff4a17.png"},145:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/NoiseMapZoom0.001-f60b8ca8d780695c87da23e9c1c3c197.png"},146:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/NoiseMapZoom0.01-84a5a8b9c58637cfeb65b22a9f80854c.png"},147:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/NoiseZoom0.01-d54bccebfeb114cd20afb55f88c22e13.png"},148:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/NoiseZoom0.1-6205d2c475f5126da9c9dbe2a190cc87.png"},76:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return p}));var a=n(3),i=n(7),o=(n(0),n(95)),r={title:"Implementation"},s={unversionedId:"topics/noise-implementation",id:"topics/noise-implementation",isDocsHomePage:!1,title:"Implementation",description:"This page explains the detailed implementation and paremeters of BrownianNoise and SubSampledNoise, covering their mechanics and usages.",source:"@site/docs/topics/noise-implementation.md",slug:"/topics/noise-implementation",permalink:"/TutorialWorldGeneration/docs/topics/noise-implementation",editUrl:"https://github.com/terasology/TutorialWorldGeneration/edit/develop/docs/docs/topics/noise-implementation.md",version:"current",sidebar:"someSidebar",previous:{title:"World Generation",permalink:"/TutorialWorldGeneration/docs/topics/noise-worldgen"}},c=[{value:"BrownianNoise",id:"browniannoise",children:[]},{value:"SubSampledNoise",id:"subsamplednoise",children:[]}],l={toc:c};function p(e){var t=e.components,r=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},l,r,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"This page explains the detailed implementation and paremeters of ",Object(o.b)("inlineCode",{parentName:"p"},"BrownianNoise")," and ",Object(o.b)("inlineCode",{parentName:"p"},"SubSampledNoise"),", covering their mechanics and usages."),Object(o.b)("h3",{id:"browniannoise"},"BrownianNoise"),Object(o.b)("p",null,"For ",Object(o.b)("inlineCode",{parentName:"p"},"BrownianNoise"),", in this tutorial, we use it to create mountains. We use it to overlay different layers of noise and to adjust the octave. Code sample from this tutorial's mountains terrain: "),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-java"},"@Override\npublic void setSeed(long seed) {\n    terrainNoise = new SubSampledNoise(new BrownianNoise(new PerlinNoise(seed + 2), 8), new Vector2f(0.001f, 0.001f), 1);\n}\n")),Object(o.b)("p",null,"Parameters of BrownianNoise: "),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-java"},"BrownianNoise(Noise other, int octaves)\n")),Object(o.b)("p",null,"For the mountains terrain in this tutorial, the ",Object(o.b)("inlineCode",{parentName:"p"},"other")," is set to ",Object(o.b)("inlineCode",{parentName:"p"},"new PerlinNoise(seed + 2)"),". The octave is ",Object(o.b)("inlineCode",{parentName:"p"},"8"),". Let's change the octave to 2 and see what will happen?"),Object(o.b)("p",null,Object(o.b)("img",{alt:"TerrainOctave2",src:n(143).default})),Object(o.b)("p",null,"The mountains are more rounded and also the gaps (valleys) between each one are wider. It seems like it has less details and the mountains are more spread."),Object(o.b)("p",null,Object(o.b)("img",{alt:"TerrainOctave8",src:n(144).default})),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"2 octaves  vs. 8 octaves . Same position.")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"octaves")," is used to determine how many noise functions are added together to form 1 noise function, in this case ",Object(o.b)("inlineCode",{parentName:"p"},"PerlinNoise"),". The number of octaves control the amount of detail of ",Object(o.b)("inlineCode",{parentName:"p"},"PerlinNoise"),". More octaves, more noise functions added, more details and more calculation."),Object(o.b)("h3",{id:"subsamplednoise"},"SubSampledNoise"),Object(o.b)("p",null,'This is used to smooth out the noise by "zooming in" or "stretching" the noise values out. You can see its usage in both mountains and rolling hills terrain. Let\'s take a look at ',Object(o.b)("inlineCode",{parentName:"p"},"SubSampledNoise")," - its parameters and their usages."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-java"},"SubSampledNoise(Noise source, Vector3f zoom, int sampleRate)\n")),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"source")," is the noise generator. For example, in the mountains terrain, we use ",Object(o.b)("inlineCode",{parentName:"p"},"new BrownianNoise(new PerlinNoise(seed + 2), 8)"),". The ",Object(o.b)("inlineCode",{parentName:"p"},"zoom")," is ",Object(o.b)("inlineCode",{parentName:"p"},"0.001f, 0.001f, 1f")," - default value for z axis is 1 as noise map is 2D. The ",Object(o.b)("inlineCode",{parentName:"p"},"sampleRate")," is ",Object(o.b)("inlineCode",{parentName:"p"},"1"),"."),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"zoom")," is used to zoom in/out the noise map and to adjust noise's frequency. Let's take a look at some examples - we're still using mountain terrains as examples for clearer images."),Object(o.b)("p",null,Object(o.b)("img",{alt:"NoiseMapZoom0.001",src:n(145).default})),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"The above is the Noise Map for the second terrain which uses ",Object(o.b)("inlineCode",{parentName:"em"},"0.001f, 0.001f, 1f")," as ",Object(o.b)("inlineCode",{parentName:"em"},"zoom"),".")),Object(o.b)("p",null,Object(o.b)("img",{alt:"NoiseMapZoom0.01",src:n(146).default})),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"This is the Noise Map of a terrain which uses ",Object(o.b)("inlineCode",{parentName:"em"},"0.01f, 0.01f, 1f")," as ",Object(o.b)("inlineCode",{parentName:"em"},"zoom"),".")),Object(o.b)("p",null,"As you can see, the first Noise Map is like a zoom in version of the second one - bigger bright and dark area. That means in the same given area, the second one will produce more mountains but with fewer details."),Object(o.b)("p",null,Object(o.b)("img",{alt:"TerrainNoiseZoom0.01",src:n(147).default})),Object(o.b)("p",null,"This is the terrain generated by the second Noise Map. It is nice. The difference between the two is the mountains here are smaller and steeper than the first one because of more bright and dark area per the same given area. More frequency, less wavelength, same amplitude."),Object(o.b)("p",null,"The result can be extreme. Below is a terrain which uses ",Object(o.b)("inlineCode",{parentName:"p"},"0.1f, 0.1f, 1f")," as ",Object(o.b)("inlineCode",{parentName:"p"},"zoom"),"."),Object(o.b)("p",null,Object(o.b)("img",{alt:"TerrainNoiseZoom",src:n(148).default}),"\n",Object(o.b)("em",{parentName:"p"},"There are a lot of mountains and peaks in this picture more than any others in this page combined.")),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"You can play around with the ",Object(o.b)("inlineCode",{parentName:"em"},"zoom")," in the configuration menu of mountains (added in this tutorial repo). Ratio of 1 has the ",Object(o.b)("inlineCode",{parentName:"em"},"zoom")," of ",Object(o.b)("inlineCode",{parentName:"em"},"0.01f"),", lowest ratio is ",Object(o.b)("inlineCode",{parentName:"em"},"0.1f")," with the ",Object(o.b)("inlineCode",{parentName:"em"},"zoom")," of ",Object(o.b)("inlineCode",{parentName:"em"},"0.001f"),".")))}p.isMDXComponent=!0},95:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return d}));var a=n(0),i=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=i.a.createContext({}),p=function(e){var t=i.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},b=function(e){var t=p(e.components);return i.a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},u=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,r=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),b=p(n),u=a,d=b["".concat(r,".").concat(u)]||b[u]||m[u]||o;return n?i.a.createElement(d,s(s({ref:t},l),{},{components:n})):i.a.createElement(d,s({ref:t},l))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,r[1]=s;for(var l=2;l<o;l++)r[l]=n[l];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);